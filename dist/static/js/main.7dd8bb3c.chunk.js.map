{"version":3,"sources":["stories/components/atoms/button/button.tsx","stories/components/atoms/field/field.tsx","utils/validation.util.js","constants/error.constants.js","constants/regex.constants.js","constants/static.constants.js","modules/registration/components/index.js","modules/registration/container/index.js","App.js","index.js"],"names":["Button","clicked","children","props","onClick","Field","id","label","fieldType","options","value","defaultValue","name","className","handleOnBlur","handleOnChange","handleKeyDown","handleKeyPress","includeErrorField","htmlFor","toLowerCase","type","onChange","e","onBlur","onKeyDown","onKeyPress","console","log","required","map","option","key","defaultProps","fieldToCompare","error","fieldMandate","email","mobileNumber","password","passwordMatch","regex","mandatoryValidation","emailValidation","mobileNumberValidation","passwordComplexityValidation","constants","errorMessage","phoneNumberCountryCode","validationSchema","userEmail","userPassword","userMobile","userConfirmPassword","Registration","countryPhoneCode","applyValidation","target","isError","validation","document","querySelector","closest","textContent","test","onFieldBlur","oldvalue","field","setTimeout","indexOf","charCode","which","keyCode","isValidationFailedArr","Object","keys","fieldName","includes","App","Kutumb","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7dd8bb3c.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n//import classes from './Button.css';\r\n\r\ninterface IButtonProps {\r\n    children?: React.ReactNode;\r\n    props?: any;\r\n    clicked?: any;\r\n    classes ?:[];\r\n}\r\n\r\nconst Button: React.FC<IButtonProps> = ({ clicked, children, ...props }) => {\r\n    return (\r\n        <button {...props} onClick={clicked}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\n\r\n","import * as React from \"react\";\r\n\r\ntype Editor = \"textbox\" | \"multilinetextbox\" | \"dropdown\";\r\nexport interface IFieldProps {\r\n  id: string;\r\n  label?: string;\r\n  fieldType?: Editor;\r\n  options?: string[];\r\n  defaultValue?: any;\r\n  value?: any;\r\n  name?: string;\r\n  className?: String;\r\n  handleOnBlur?: Function;\r\n  handleOnChange?: Function;\r\n  handleKeyDown?: Function;\r\n  handleKeyPress?: Function;\r\n  includeErrorField?: Boolean;\r\n}\r\n\r\nexport const Field: React.SFC<IFieldProps> = ({\r\n  id,\r\n  label,\r\n  fieldType,\r\n  options,\r\n  value,\r\n  defaultValue,\r\n  name,\r\n  className,\r\n  handleOnBlur,\r\n  handleOnChange,\r\n  handleKeyDown,\r\n  handleKeyPress,\r\n  includeErrorField\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={id}>{label}</label>}\r\n\r\n      {fieldType!.toLowerCase() === \"textbox\" && (\r\n        <input\r\n          id={id}\r\n          type=\"text\"\r\n          value={value}\r\n          defaultValue={defaultValue}\r\n          onChange={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleOnChange && handleOnChange(e)\r\n          }\r\n          onBlur={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleOnBlur && handleOnBlur(e)\r\n          }\r\n          onKeyDown={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleKeyDown && handleKeyDown(e)\r\n          }\r\n          onKeyPress={\r\n            (e: React.FormEvent<HTMLInputElement>) => {\r\n              return handleKeyPress && handleKeyPress(e)\r\n            }\r\n          }\r\n          className=\"form-control\"\r\n        />\r\n      )}\r\n\r\n      {fieldType!.toLowerCase() === \"multilinetextbox\" && (\r\n        <textarea\r\n          id={id}\r\n          value={value}\r\n          onChange={\r\n            (e: React.FormEvent<HTMLTextAreaElement>) =>\r\n              console.log(e)\r\n          }\r\n          onBlur={\r\n            (e: React.FormEvent<HTMLTextAreaElement>) =>\r\n              console.log(e) /* TODO: validate field value */\r\n          }\r\n          className=\"form-control\"\r\n        />\r\n      )}\r\n          {fieldType!.toLowerCase() === \"email\" && (\r\n        <input\r\n          id={id}\r\n          name={name}\r\n          type=\"email\"\r\n          value={value}\r\n          onChange={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n            handleOnChange && handleOnChange(e)\r\n          }\r\n          onBlur={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleOnBlur && handleOnBlur(e)\r\n          }\r\n          required\r\n          className={`form-control ${className ? className : ''}`} \r\n        />\r\n      )}\r\n      {fieldType!.toLowerCase() === \"password\" && (\r\n        <input\r\n          id={id}\r\n          name={name}\r\n          type=\"password\"\r\n          value={value}\r\n          onChange={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleOnChange && handleOnChange(e)\r\n          }\r\n          onBlur={\r\n            (e: React.FormEvent<HTMLInputElement>) =>\r\n              handleOnBlur && handleOnBlur(e)\r\n          }\r\n          required\r\n          className=\"form-control\"\r\n        />\r\n      )}\r\n\r\n      {fieldType!.toLowerCase() === \"dropdown\" && (\r\n        <select\r\n          id={id}\r\n          name={id}\r\n          value={value}\r\n          onChange={\r\n            (e: React.FormEvent<HTMLSelectElement>) =>\r\n              console.log(e)\r\n          }\r\n          onBlur={\r\n            (e: React.FormEvent<HTMLSelectElement>) =>\r\n              console.log(e) \r\n          }\r\n          className=\"form-control\"\r\n        >\r\n          {options &&\r\n            options.map(option => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      )}\r\n      {includeErrorField && <div className=\"error\"></div>}\r\n    </div>\r\n  );\r\n};\r\nField.defaultProps = {\r\n    fieldType: \"textbox\"\r\n};\r\n\r\nexport default Field;","import * as constants from '../constants/index';\r\n\r\nexport const mandatoryValidation = {\r\n    regex: constants.regex.mandatoryValidation,\r\n    errorMessage: constants.error.generic.fieldMandate\r\n};\r\n\r\nexport const emailValidation = {\r\n    regex: constants.regex.emailValidation,\r\n    errorMessage: constants.error.generic.email\r\n};\r\n\r\nexport const mobileNumberValidation = {\r\n    regex: constants.regex.mobileNumberValidation,\r\n    errorMessage: constants.error.generic.mobileNumber\r\n};\r\nexport const passwordComplexityValidation = {\r\n    regex: constants.regex.passwordComplexityValidation,\r\n    errorMessage: constants.error.generic.password\r\n};\r\n\r\nexport const passwordMatchWith = (fieldToCompare) => {\r\n    return {\r\n        type: 'passwordmatch',\r\n        errorMessage: constants.error.generic.passwordMatch,\r\n        fieldToCompare\r\n    };\r\n};","export const error = {\r\ngeneric:{\r\n fieldMandate:'This field is mandatory',\r\n email:'Please enter a valid email id',\r\n mobileNumber: \"Please enter a valid mobile number\", \r\n password:'Password must be between 6 and 15 characters and include at least 2 of the following: Lowercase letters, uppercase letters, digits and symbols',\r\n passwordMatch:'Please enter matching password'\r\n},\r\npageError:{\r\n\r\n},\r\nstatusCode:['404', '500', '403', '400', '503', '401'],\r\n\r\nregistration:{\r\n\r\n}\r\n\r\n}\r\n","export const regex = {\r\n    mandatoryValidation: /^(?!\\s*$).+/,\r\n    emailValidation: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    mobileNumberValidation: /^\\+\\d{2}\\d{10}$/, // Indian mobile number validation.\r\n    passwordComplexityValidation: /^((?=.*[a-z])(?=.*[A-Z])(?=.*\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\d@#$%^&*\\-_+=[\\]{}|\\\\:',?/`~\"();!]|\\.(?!@)){6,15}$/\r\n};","export const phoneNumberCountryCode = {\r\n    IN: '+91'\r\n}","import React from \"react\";\r\nimport Button from \"../../../stories/components/atoms/button/button\";\r\nimport Field from \"../../../stories/components/atoms/field/field.tsx\";\r\n// import {Button} from \"atom-components-kutumb\";\r\nimport {\r\n  mandatoryValidation,\r\n  emailValidation,\r\n  mobileNumberValidation,\r\n  passwordMatchWith,\r\n  passwordComplexityValidation,\r\n} from \"../../../utils/validation.util\";\r\nimport { phoneNumberCountryCode } from \"../../../constants/static.constants\";\r\n\r\nconst validationSchema = {\r\n  userEmail: [mandatoryValidation, emailValidation],\r\n  userPassword: [mandatoryValidation, passwordComplexityValidation],\r\n  userMobile: [mandatoryValidation, mobileNumberValidation],\r\n  userConfirmPassword: [\r\n    mandatoryValidation,\r\n    passwordMatchWith(\"userPassword\"),\r\n    passwordComplexityValidation,\r\n  ],\r\n};\r\n\r\nconst Registration = () => {\r\n  const countryPhoneCode = phoneNumberCountryCode.IN;\r\n  const applyValidation = (target) => {\r\n    let isError = false;\r\n    if (validationSchema[target.id]) {\r\n      return validationSchema[target.id].map((validation) => {\r\n        if (validation.type === \"passwordmatch\") {\r\n          const fieldToCompare = document.querySelector(\r\n            \"#\" + validation.fieldToCompare\r\n          );\r\n          if (\r\n            fieldToCompare &&\r\n            fieldToCompare.value !== target.value &&\r\n            !isError\r\n          ) {\r\n            target.closest(\".form-field\").querySelector(\".error\").textContent =\r\n              validation.errorMessage;\r\n            isError = true;\r\n          }\r\n        } else if (!validation.regex.test(target.value) && !isError) {\r\n          target.closest(\".form-field\").querySelector(\".error\").textContent =\r\n            validation.errorMessage;\r\n          isError = true;\r\n        }\r\n        if (!isError) {\r\n          target.closest(\".form-field\").querySelector(\".error\").textContent =\r\n            \"\";\r\n        }\r\n      });\r\n    }\r\n    return isError;\r\n  };\r\n\r\n  const onFieldBlur = (e) => {\r\n    applyValidation(e.target);\r\n  };\r\n\r\n  const isNumberKey = (e) => {\r\n    var charCode = e.which ? e.which : e.keyCode;\r\n    var oldvalue = e.target.value;\r\n    var field = e.target;\r\n    setTimeout(() => {\r\n      if (charCode !== 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {\r\n        field.value = oldvalue;\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const onMobileFieldKeyDown = (e) => {\r\n    var oldvalue = e.target.value;\r\n    var field = e.target;\r\n    setTimeout(() => {\r\n      if (field.value.indexOf(countryPhoneCode) !== 0) {\r\n        field.value = oldvalue;\r\n      }\r\n    }, 1);\r\n  };\r\n\r\n  const submitForm = () => {\r\n    const isValidationFailedArr = Object.keys(\r\n      validationSchema\r\n    ).map((fieldName) =>\r\n      applyValidation(document.querySelector(\"#\" + fieldName))\r\n    );\r\n    console.log(\"errors\", isValidationFailedArr);\r\n    if (!isValidationFailedArr.includes(true)) {\r\n      console.log(\"API Call..........\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"registration-page\">\r\n      <div className=\"form-field\">\r\n        <Field\r\n          id=\"userEmail\"\r\n          label=\"Email Id:\"\r\n          fieldType=\"email\"\r\n          handleOnBlur={onFieldBlur}\r\n          name=\"userEmail\"\r\n          includeErrorField={true}\r\n        />\r\n      </div>\r\n      <div className=\"form-field\">\r\n        <Field\r\n          id=\"userMobile\"\r\n          label=\"Mobile No:\"\r\n          fieldType=\"textbox\"\r\n          handleOnBlur={onFieldBlur}\r\n          handleKeyDown={onMobileFieldKeyDown}\r\n          handleKeyPress={isNumberKey}\r\n          name=\"userMobile\"\r\n          defaultValue={countryPhoneCode}\r\n          includeErrorField={true}\r\n        />\r\n      </div>\r\n      <div className=\"form-field\">\r\n        <Field\r\n          id=\"userPassword\"\r\n          label=\"Password:\"\r\n          fieldType=\"password\"\r\n          name=\"userPassword\"\r\n          handleOnBlur={onFieldBlur}\r\n          includeErrorField={true}\r\n        />\r\n      </div>\r\n      <div className=\"form-field\">\r\n        <Field\r\n          id=\"userConfirmPassword\"\r\n          label=\"Confirm Password:\"\r\n          fieldType=\"password\"\r\n          name=\"userConfirmPassword\"\r\n          handleOnBlur={onFieldBlur}\r\n          includeErrorField={true}\r\n        />\r\n      </div>\r\n      <div className=\"button form-field\">\r\n        <Button onClick={submitForm} className=\"ekutumb-btn ekutumb-purple\">Sign Up</Button>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Registration;","import React from 'react';\r\nimport RegistrationComp from '../components';\r\n\r\nconst Registration = () => {\r\n\r\n    return <div>\r\n      <RegistrationComp></RegistrationComp>\r\n    </div>\r\n};\r\nexport default Registration;","import React from 'react';\r\nimport Kutumb from 'kutumb-style';\r\nimport RegistrationModule from '../src/modules/registration/container';\r\nfunction App() {\r\n  console.log('kutumb css' + Kutumb);\r\n  return (\r\n    <div className=\"App\">\r\n     \r\n      <RegistrationModule/>\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './App.scss';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}